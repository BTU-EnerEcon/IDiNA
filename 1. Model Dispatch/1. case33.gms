*We request that publications derived from the use of the codes provided in this online depository, explicitly acknowledge that fact by citing the papers, the code(s) and the appropriate software.

*Papers:
*[1] S. H. Dolatabadi, M. Ghorbanian, P. Siano, and N. D. Hatziargyriou �An Enhanced IEEE 33 Bus Benchmark Test System for Distribution System Studies,� IEEE Trans. Power Syst., 2020. 
*[2] M. Ghorbanian, S. H. Dolatabadi, and P. Siano, �Game theory-based energy-management method considering autonomous demand response and distributed generation interactions in smart distribution systems,� IEEE Syst. J., pp. 1�10, 2020. 
*[3] This GitHub code repository including DOI
*Software:
*[4] R. D. Zimmerman and C. E. Murillo-Sanchez, �Matpower [software],� 2018. [Online]. Available: https://matpower.org
*[5] G. D. Corporation, �General algebraic modeling system (gams) release 27.1.0,� Fairfax, VA, USA, 2019. [Online]. Available: https://www.gams.com/
*[6] �Digsilent powerfactory,� 2019. [Online]. Available: https://www.digsilent.de/
*[7] MathWorks, �Matlab/simulink 9.3,� 2019. [Online]. Available: https://www.mathworks.com
*[8] J. Y. Wong, �IEEE 33 Bus System,� 2020, MATLAB Central File Exchange. Retrieved September 15, 2020. [Online]. Available: https://www.mathworks.com/matlabcentral/fileexchange/73127-ieee-33-bus-system



set b 'buses' /1*33/;
set l 'lines' /1*35/;
set t 'timesteps' /1*8760/;
set g 'conventional generators' /1*5/;
set p 'solar photovoltaik generators' /1*4/;

;
set
Generator(g) /2*5/
Slack_generator(g) /1/
Map_G(b,g)/ 18.2, 22.3, 25.4,33.5/
Map_Slack_G(b,g) /1.1/

Map_PV(b,p) /18.1, 22.2, 25.3, 33.4/
;
*kV
parameter Vbase /12.66/;
*MVA
parameter Sbase /100/;


$include 1_Loading_input_case33.gms
;

*execute_unload "check_input_c33.gdx";
*$stop

Variables
OF          objective funktion value to be minimized (total costs)
Qg(g,t)     Reactive power generated by thermal unit g connected to bus i at time t (MW). Blindleistungserzeugung thermisch
;
positive variable
Pv(p,t)     Active power generated by wind turbine connected to bus i at time t (MW). Wirkleistungserzeugung thermisch
Pg(g,t)     Active power generated by thermal unit g connected to bus i at time t (MW). Wirkleistungserzeugung thermisch
Buy_M(t)
;

Equation  eq1, eq2, eq3, eq4, eq5  ;


eq1..   OF =e= sum((g,t)$Generator(g) , Pg(g,t) * MP_DH(t)) - sum((g,t)$Generator(g) , Pg(g,t) * GenD(g,'var')$GenD(g,'Pmax'))
             + sum((g,t)$Slack_generator(g), Pg(g,t) * MP_DH(t)) - sum((g,t)$Slack_generator(g) , Pg(g,t) * GenD(g,'var')$GenD(g,'Pmax'))
             + sum((p,t), Pv(p,t) * MP_DH(t))
             - sum(t, Buy_M(t) *  MP_DH(t));
             
                 

eq2(t).. sum((p),Pv(p,t)) + sum(g, + Pg(g,t)$GenD(g,'Pmax')) + Buy_M(t)  =e= load_p(t);


eq3(t).. sum(g, Qg(g,t)$GenD(g,'Qmax'))  =e= load_q(t);


* Ramping up constraint

eq4(g,t)$(GenD(g,'Pmax') and ord(t)>1)..   Pg(g,t) - Pg(g,t-1) =l= 100;
   
* Ramping down constraint

eq5(g,t)$(GenD(g,'Pmax') and ord(t)<card(t))..  Pg(g,t) - Pg(g,t+1) =l= 100;

 
**********************************************************

Model Dispatch / eq1, eq2, eq3, eq4, eq5 /;

**********************************************************

*upper & lower bound Wirkleistung

Pg.lo(g,t) = 0;
Pg.up(g,t) = GenD(g,'pmax');

*upper & lower bound Blindleistung

Qg.lo(g,t) = 0;
Qg.up(g,t) = GenD(g,'Qmax');

Pv.up(p,t) = CF(t) * GenPV(p,'pmax');
Pv.lo(p,t) = 0;

*Option NLP = IPOPT; 
*option NLP = pathnlp;

solve Dispatch maximizing OF using lp;

Parameter report(t,g,*), report2(t,*), report3(g,t), report4(g,t), sKnr(b,t), sKni(b,t),  D_genP(g,t), pv_infeed(b,t) ;

report(t,g,'Pg')    = Pg.l(g,t)+EPS;
report(t,g,'Qg')    = Qg.l(g,t)+EPS;
report2(t,'MP_P')   = eq2.m(t);
report2(t,'MP_Q')   = eq3.m(t);
report3(g,t)        = Pg.l(g,t)+EPS;
report4(g,t)        = Qg.l(g,t)+EPS;

*Load_bus_p(b,t)         =  BP(b) * profil(t);
*Load_bus_q(b,t)         =  BQ(b) * profil(t);

sKnr(b,t)           = sum(g, Pg.l(g,t)$Map_G(b,g)) + sum(p, Pv.l(p,t)$Map_PV(b,p)) +  Buy_M.l(t) - Load_bus_p(t,b);
sKni(b,t)           = sum(g, Qg.l(g,t)$Map_G(b,g)) - Load_bus_q(t,b);

D_genP(g,t)         = Pg.l(g,t);
pv_infeed(b,t)      = sum(p, Pv.l(p,t)$Map_PV(b,p));

system_costs = sum((g,t)$Generator(g) , Pg.l(g,t) * GenD(g,'var')$GenD(g,'Pmax'))
              +sum((g,t)$Slack_generator(g) , Pg.l(g,t) * GenD(g,'var')$GenD(g,'Pmax'))
              +sum(t, Buy_M.l(t) *  MP_DH(t));

execute_unload "IEEE_Case_Study.gdx";

execute_unload "AC_Input_IEEE_Case_Study.gdx"
sKnr, sKni































