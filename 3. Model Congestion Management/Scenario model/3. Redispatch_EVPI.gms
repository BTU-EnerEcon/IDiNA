$setglobal    on_spring ""      if "*" spring input is readed, else ""
$setglobal    on_summer ""      if "*" summer input is readed, else ""
$setglobal    on_fall   "*"      if "*" fall input is readed, else ""
$setglobal    on_winter ""      if "*" winter input is readed, else ""

;
$set spring      spring/
$set summer      summer/
$set fall        fall/
$set winter      winter/
;

Sets
   t                           / 1*96    /
   b        'network buses'    / 1*33    /
   l        'lines'            / 1*35   /
   g        'dispatchable generating units' / 1*5   /
   p        'solar photovoltaik generators' /1*4  /
   s        'scenarios'        / s1*s1000/
   slack(b)                    / 1       /
   Map_G(b,g)/1.1, 18.2, 22.3, 25.4,33.5/
   Map_PV(b,p) /18.1, 22.2, 25.3, 33.4/
   
  it /1*10/

;
Scalar
   Sbase /   100 /
   VOLL  / 10000 /
   VOLW  /    50 /
   Line_cap_scale /0/;

Alias (b,bb), (s,ss)
;
$include 3_input_setup_EVPI.gms
execute_unload "check.gdx";
*$stop
;
************Redispatch****************************************
Variables
RD_OF                 objective funktion value to be minimized (total costs)
adjust_Pij(l,t)     Wirkleistungs powerflow (current in A)  = Total Voltage : total impedance  

*RD_Va(b,t)         Voltage angle of bus i at time t (rad)
*RD_V(s,b,t)          Voltage magnitude in bus i at time t (pu)
*RD_Pw(b,t)         Active power generated by wind turbine connected to bus i at time t (MW). Wirkleistungserzeugung thermisch

;

positive variables
adjust_v(b,t)

*RD_Pg(g,t)              Resulting active power generation
RD_Pg_up(g,t)           Active power increase due to redispatch by thermal unit g connected to bus i at time t (MW). Wirkleistungserzeugung thermisch
RD_Pg_down(g,t)         Active power decrease due to redispatch by thermal unit g connected to bus i at time t (MW). Wirkleistungserzeugung thermisch
RD_dem_resp_down(b,t)   positive active power Demand response (reduction of load)
RD_dem_resp_up(b,t)     negative active power Demand response (increase of of load)

RD_Qg_pos(g,t)           Resulting positive reactive power redispatch from conventional generators
RD_Qg_neg(g,t)           Resulting negative reactive power redispatch from conventional generators
RD_Qpv_pos(p,t)          Resulting positive reactive power redispatch from PV plants
RD_Qpv_neg(p,t)          Resulting positive reactive power redispatch from PV plants

violation(l,t)


*RD_Qg_up(g,t)     Reactive power increase due to redispatch by thermal unit g connected to bus i at time t (MW). Blindleistungserzeugung thermisch
*RD_Qg_down(g,t)   Reactive power decrease due to redispatch by thermal unit g connected to bus i at time t (MW). Blindleistungserzeugung thermisch
RD_curtail(b,t)
RD_LS(s,b,t)
;

Equation
RD_eq1,
RD_eq2a, RD_eq2b
RD_eq3,
RD_eq4, 
RD_eq5,
RD_eq6,
RD_eq7,
RD_eq8,
RD_eq9,
RD_eq10,
RD_eq11,
RD_eq12
;

*#########################################Redispatch###################################################


RD_eq1..                          RD_OF  =e=

                                    + sum((g,t), RD_Pg_up(g,t)  * GenD(g,'var'))
                                    + sum((g,t), (RD_Pg_down(g,t) ) * (MP_DH(t,'price') - GenD(g,'var')/2))
                                    
                                    + sum((g,t), RD_Qg_pos(g,t) * MP_DH(t,'price'))
                                    + sum((g,t), RD_Qg_neg(g,t) * MP_DH(t,'price'))
                                    + sum((p,t), RD_Qpv_pos(p,t) * MP_DH(t,'price'))
                                    + sum((p,t), RD_Qpv_neg(p,t) * MP_DH(t,'price'))
                                    
                                    + sum((b,t), RD_dem_resp_down(b,t) * (MP_DH(t,'price')))
                                    + sum((b,t), RD_dem_resp_up(b,t) * MP_DH(t,'price'))
                                    + sum((b,t), RD_curtail(b,t) * MP_DH(t,'price'))
                                                              
                                    + sum((l,t), violation(l,t) * 100000000)
;                                 

*adjusted wirkleistungs powerflow from i to j on line l due to congestion management actions

RD_eq2a(l,t)..                      adjust_Pij(l,t)  =e= PF_result(l,t)
                                    + sum((b),  ((-1) * PTDF_PBPK(l,b,t)) * (sum(g$Map_G(b,g), RD_Pg_up(g,t) - RD_Pg_down(g,t)) - RD_curtail(b,t)
                                    -  RD_dem_resp_down(b,t) + RD_dem_resp_up(b,t))
                                    )
                                    + sum((b),  ((-1) * PTDF_PBQK(l,b,t)) * (sum(g$Map_G(b,g), RD_Qg_pos(g,t) - RD_Qg_neg(g,t))  +  sum(p$Map_PV(b,p), RD_Qpv_pos(p,t) - RD_Qpv_neg(p,t))))
                                    
;


*adjusted voltage level at node i due to congestion management actions

RD_eq2b(bb,t)..                     adjust_v(bb,t)  =e= VL_result(bb,t)
                                    + sum(b, ((-1) * PTDF_UKPK(b,bb,t)*1000) * (sum(g$Map_G(b,g), RD_Pg_up(g,t) - RD_Pg_down(g,t)) - RD_curtail(b,t)
                                    -  RD_dem_resp_down(b,t) + RD_dem_resp_up(b,t))
                                    )
                                    + sum(b, ((-1) * PTDF_UKQK(b,bb,t)*1000) * (sum(g$Map_G(b,g), RD_Qg_pos(g,t) - RD_Qg_neg(g,t))  +  sum(p$Map_PV(b,p), RD_Qpv_pos(p,t) - RD_Qpv_neg(p,t))))
                                    
;
                               

*Thermal power flow limitations of lines (current in A)
RD_eq3(l,t)..                         adjust_Pij(l,t)  =l= (sLmax_scaled(l)  + sLmax_scaled(l) * Line_cap_scale) + violation(l,t)
;

RD_eq4(l,t)..                         adjust_Pij(l,t)  =g= - (sLmax_scaled(l)  + sLmax_scaled(l) * Line_cap_scale) + ( - violation(l,t))
;

*Volatage level limitations of lines in kV

RD_eq5(b,t)..                         adjust_v(b,t)*1000  =l= ukn(b,t)*1.05
;

RD_eq6(b,t)..                         adjust_v(b,t)*1000  =g= ukn(b,t)*0.95
;

* active Redispatch positive active demand response constraint

RD_eq7(b,t)..                         RD_dem_resp_down(b,t) =l= load_bus_p(b,t)
;

* active Redispatch negative demand response constraint

RD_eq8(b,t)..                         RD_dem_resp_up(b,t) =l= load_bus_p(b,t) * 0.5
;
* active Redispatch Ramping up constraint 

RD_eq9(g,t)..                         RD_Pg_up(g,t)   =l= GenD(g,'pmax') - D_genP(g,t)
;
   
* active Redispatch Ramping down constraint 2 

RD_eq10(g,t)..                        RD_Pg_down(g,t) =l= D_genP(g,t)
;

* active Redispatch Curtailment

RD_eq11(b,t)..                        RD_curtail(b,t) =l= pv_infeed(b,t)
;


RD_eq12..                             0 =e=  sum((b,t), RD_dem_resp_down(b,t) + RD_dem_resp_up(b,t))
;
*###############################Model definition############################################  
**********************************************************


Model Redispatch / RD_eq1, RD_eq2a, RD_eq2b, RD_eq3, RD_eq4, RD_eq5, RD_eq6, RD_eq7, RD_eq8, RD_eq9, RD_eq10, RD_eq11/ ;

*only thermal CM  RD_eq1, RD_eq2a,  RD_eq3, RD_eq4,  RD_eq7, RD_eq8, RD_eq9, RD_eq10, RD_eq11
*only voltage CM  RD_eq1, RD_eq2b,  RD_eq5, RD_eq6,  RD_eq7, RD_eq8, RD_eq9, RD_eq10, RD_eq11
*complete CM      RD_eq1, RD_eq2a, RD_eq2b, RD_eq3, RD_eq4, RD_eq5, RD_eq6, RD_eq7, RD_eq8, RD_eq9, RD_eq10, RD_eq11


*****************************output parameter declaration
Parameter
EVPI(s)
EVPI_B(s,b)
report(t,g,*)
D_injection(b,t)
D_draw(b,t)
D_saldo(b,t)
report3(g,t)
report4(g,t)
lmp(b,t)
report_violation(s,l,t)
Report_curtail(s,b,t)
Report_PG_up(s,g,t)
Report_PG_down(s,g,t)
Report_dem_resp_down(s,b,t)
Report_dem_resp_up(s,b,t)
Report_RD_costs(s)
Uncertain_line_flow(l,t)
;
option threads =  -10
;
*****************************looping
loop(it,

***************************** variable loop input 

$include 3_input_loop_EVPI.gms
*execute_unload "check_loop.gdx";
*$stop
***************************** reactive variables bounds

RD_Qg_pos.up(g,t) = 0.6;
RD_Qg_neg.up(g,t) = 0.6;

RD_Qpv_pos.up(p,t) =  0.087 * CF(t);
RD_Qpv_neg.up(p,t) =  0.087 * CF(t);


*****************************Solving redispatch
loop(s,

PF_result(l,t) = PF_result_scenario(s,l,t)
;
VL_result(b,t) =  VL_result_scenario(s,b,t)
;

solve Redispatch minimizing RD_OF using lp;

;
*line_load(l,t) = adjust_Pij.l(l,t)/ (sLmax_scaled(l) - Line_cap_scale);
*Uncertain_line_flow(l,t) = adjust_Pij.l(l,t);
report_violation(s,l,t) = violation.l(l,t);
Report_PG_up(s,g,t) = RD_Pg_up.l(g,t) ;
Report_PG_down(s,g,t)= RD_Pg_down.l(g,t);
Report_dem_resp_down(s,b,t) = RD_dem_resp_down.l(b,t);
Report_dem_resp_up(s,b,t) = RD_dem_resp_up.l(b,t)    ;
Report_curtail(s,b,t) = RD_curtail.l(b,t)            ;

Report_RD_costs(s) =   sum((g,t), RD_Pg_up.l(g,t)  * GenD(g,'var'))
                    + sum((g,t), (RD_Pg_down.l(g,t) ) * (MP_DH(t,'price') - GenD(g,'var')/2))
                                    
                    + sum((g,t), RD_Qg_pos.l(g,t) * MP_DH(t,'price'))
                    + sum((g,t), RD_Qg_neg.l(g,t) * MP_DH(t,'price'))
                    + sum((p,t), RD_Qpv_pos.l(p,t) * MP_DH(t,'price'))
                    + sum((p,t), RD_Qpv_neg.l(p,t) * MP_DH(t,'price'))
                                    
                    + sum((b,t), RD_dem_resp_down.l(b,t) * (MP_DH(t,'price')))
                    + sum((b,t), RD_dem_resp_up.l(b,t) * MP_DH(t,'price'))
                    + sum((b,t), RD_curtail.l(b,t) * MP_DH(t,'price'));
                    

EVPI_B(s,b) = sum((g,t)$Map_G(b,g), RD_Pg_up.l(g,t)  * GenD(g,'var'))
                    + sum((g,t)$Map_G(b,g), (RD_Pg_down.l(g,t) ) * (MP_DH(t,'price') - GenD(g,'var')/2))
                                    
                    + sum((g,t)$Map_G(b,g), RD_Qg_pos.l(g,t) * MP_DH(t,'price'))
                    + sum((g,t)$Map_G(b,g), RD_Qg_neg.l(g,t) * MP_DH(t,'price'))
                    + sum((p,t)$Map_PV(b,p), RD_Qpv_pos.l(p,t) * MP_DH(t,'price'))
                    + sum((p,t)$Map_PV(b,p), RD_Qpv_neg.l(p,t) * MP_DH(t,'price'))
                                    
                    + sum((t), RD_dem_resp_down.l(b,t) * (MP_DH(t,'price')))
                    + sum((t), RD_dem_resp_up.l(b,t) * MP_DH(t,'price'))
                    + sum((t), RD_curtail.l(b,t) * MP_DH(t,'price'))
;
EVPI(S) = sum(b,EVPI_B(s,b))
;
)
;
    if(ord(it) eq 1,  
        execute_unload "Fall_EVPI_01.gdx";
    elseif ord(it) eq 2,
        execute_unload "Fall_EVPI_02.gdx";  
    elseif ord(it) eq 3,
        execute_unload "Fall_EVPI_03.gdx";
    elseif ord(it) eq 4,
        execute_unload "Fall_EVPI_04.gdx";
    elseif ord(it) eq 5,
        execute_unload "Fall_EVPI_05.gdx";
    elseif ord(it) eq 6,
        execute_unload "Fall_EVPI_06.gdx";
    elseif ord(it) eq 7,
        execute_unload "Fall_EVPI_07.gdx";
    elseif ord(it) eq 8,
        execute_unload "Fall_EVPI_08.gdx";
    elseif ord(it) eq 9,
        execute_unload "Fall_EVPI_09.gdx";
    elseif ord(it) eq 10,
        execute_unload "Fall_EVPI_10.gdx";

    )
)
*execute_unload "Fall_EVPI.gdx";

*display report;